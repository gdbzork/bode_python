#!/usr/bin/env python

import sys
import gd
import math

################################################################################

def loadCDT(fn):
  fd = open(fn)
  fd.readline()
  rows = []
  for line in fd:
    flds = line.split()
    rows.append(map(lambda x:float(x),flds[3:]))
  fd.close()
  return rows

def processCDT(data):
  width = len(data[0]) * 2
  height = len(data) * 2
  sys.stderr.write("width=%d height=%d\n" % (width,height))
  png = gd.image((width,height))
  bg = png.colorAllocate((255,255,255))
  png.colorTransparent(bg)
  colset = {}
  y = 0
  for row in data:
    maxrow = 0
    for x in range(0,len(row)):
      if row[x] > maxrow:
        maxrow = row[x]
      score = int(row[x] if row[x] <= 255 else 255)
      if score > 0:
        score = int(math.log(score,2) * 31)
      if score in colset:
        colour = colset[score]
      else:
        colour = png.colorAllocate((score,0,0))
        colset[score] = colour
      if colour == -1:
        sys.stderr.write("failed to allocate colour for %f\n" % (score,))
#      png.setPixel((x,y),colour)
      png.filledRectangle((x*2,y*2),(x*2+2,y*2+2),colour)
    if maxrow > 255:
      sys.stderr.write("row max: %f\n" % (maxrow,))
    y += 1
  return png

################################################################################

inFN,outFN = sys.argv[1:]
cdt = loadCDT(inFN)
png = processCDT(cdt)
png.writePng(outFN)
